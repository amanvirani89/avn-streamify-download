{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';export var counterSlice=createSlice({name:'counter',initialState:{value:0},reducers:{increment:function increment(state){// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\nstate.value+=1;},decrement:function decrement(state){state.value-=1;},incrementByAmount:function incrementByAmount(state,action){state.value+=action.payload;}}});var _counterSlice$actions=counterSlice.actions,increment=_counterSlice$actions.increment,decrement=_counterSlice$actions.decrement,incrementByAmount=_counterSlice$actions.incrementByAmount;// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport{increment,decrement,incrementByAmount};export var incrementAsync=function incrementAsync(amount){return function(dispatch){setTimeout(function(){dispatch(incrementByAmount(amount));},1000);};};// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport var selectCount=function selectCount(state){return state.counter.value;};export default counterSlice.reducer;","map":{"version":3,"sources":["/Users/amanvirani/Desktop/React/avn-streamify/avn-streamify/src/features/counter/counterSlice.js"],"names":["createSlice","counterSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","incrementAsync","amount","dispatch","setTimeout","selectCount","counter","reducer"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAGD,WAAW,CAAC,CACtCE,IAAI,CAAE,SADgC,CAEtCC,YAAY,CAAE,CACZC,KAAK,CAAE,CADK,CAFwB,CAKtCC,QAAQ,CAAE,CACRC,SAAS,CAAE,mBAAAC,KAAK,CAAI,CAClB;AACA;AACA;AACA;AACAA,KAAK,CAACH,KAAN,EAAe,CAAf,CACD,CAPO,CAQRI,SAAS,CAAE,mBAAAD,KAAK,CAAI,CAClBA,KAAK,CAACH,KAAN,EAAe,CAAf,CACD,CAVO,CAWRK,iBAAiB,CAAE,2BAACF,KAAD,CAAQG,MAAR,CAAmB,CACpCH,KAAK,CAACH,KAAN,EAAeM,MAAM,CAACC,OAAtB,CACD,CAbO,CAL4B,CAAD,CAAhC,C,0BAsBoDV,YAAY,CAACW,O,CAAzDN,S,uBAAAA,S,CAAWE,S,uBAAAA,S,CAAWC,iB,uBAAAA,iB,CAErC;AACA;AACA;AACA;8CACA,MAAO,IAAMI,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,MAAM,QAAI,UAAAC,QAAQ,CAAI,CAClDC,UAAU,CAAC,UAAM,CACfD,QAAQ,CAACN,iBAAiB,CAACK,MAAD,CAAlB,CAAR,CACD,CAFS,CAEP,IAFO,CAAV,CAGD,CAJmC,EAA7B,CAMP;AACA;AACA;AACA,MAAO,IAAMG,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAV,KAAK,QAAIA,CAAAA,KAAK,CAACW,OAAN,CAAcd,KAAlB,EAAzB,CAEP,cAAeH,CAAAA,YAAY,CAACkB,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}