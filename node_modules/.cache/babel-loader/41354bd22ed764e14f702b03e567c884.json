{"ast":null,"code":"var _jsxFileName = \"/Users/amanvirani/Desktop/React/avn-streamify-final/avn-streamify-download/src/components/Rows.js\",\n    _s = $RefreshSig$();\n\nimport axios from '../axios';\nimport React, { useEffect, useState } from 'react';\nimport '../css/Rows.css';\nimport movieTrailer from 'movie-trailer';\nimport YouTube from 'react-youtube';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Rows({\n  movieTitle,\n  fetchUrl\n}) {\n  _s();\n\n  const [Movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  useEffect(() => {\n    async function movieData() {\n      const response = await axios.get(fetchUrl);\n      setMovies(response.data.results);\n      return response;\n    }\n\n    movieData();\n  }, [fetchUrl]);\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      console.log(movie);\n      movieTrailer(movie.name || movie.title || movie.original_name || movie.original_title).then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n        console.log(urlParams);\n        console.log(trailerUrl);\n        console.log(url);\n      }).catch(error => console.log(error));\n    }\n  };\n\n  console.log(Movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-group\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-title\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: movieTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-data\",\n      children: Movies.map(movie => movie.poster_path && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-container\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            onClick: () => handleClick(movie),\n            src: `http://image.tmdb.org/t/p/w500/${movie.poster_path}`,\n            alt: movie.title || movie.original_title || movie.name || movie.original_name\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-description\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [' ', movie.title || movie.original_title || movie.name || movie.original_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: ` ${movie.vote_average > 7 ? 'voting-green' : 'voting-red'} voting`,\n              children: movie.vote_average\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Rows, \"Eb89fPD7Y+iiCpr8vsLAZHIJRSM=\");\n\n_c = Rows;\nexport default Rows;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rows\");","map":{"version":3,"sources":["/Users/amanvirani/Desktop/React/avn-streamify-final/avn-streamify-download/src/components/Rows.js"],"names":["axios","React","useEffect","useState","movieTrailer","YouTube","Rows","movieTitle","fetchUrl","Movies","setMovies","trailerUrl","setTrailerUrl","movieData","response","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","console","log","name","title","original_name","original_title","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","id","vote_average"],"mappings":"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","sourcesContent":["import axios from '../axios';\nimport React, { useEffect, useState } from 'react';\nimport '../css/Rows.css';\nimport movieTrailer from 'movie-trailer';\nimport YouTube from 'react-youtube';\n\nfunction Rows({ movieTitle, fetchUrl }) {\n  const [Movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n\n  useEffect(() => {\n    async function movieData() {\n      const response = await axios.get(fetchUrl);\n      setMovies(response.data.results);\n      return response;\n    }\n\n    movieData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      console.log(movie);\n      movieTrailer(\n        movie.name || movie.title || movie.original_name || movie.original_title\n      )\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n          console.log(urlParams);\n          console.log(trailerUrl);\n          console.log(url);\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  console.log(Movies);\n\n  return (\n    <div className=\"movie-group\">\n      <div className=\"movie-title\">\n        <h2>{movieTitle}</h2>\n      </div>\n      <div className=\"movie-data\">\n        {Movies.map(\n          (movie) =>\n            movie.poster_path && (\n              <div className=\"movie-card\">\n                <div className=\"card-container\">\n                  <img\n                    key={movie.id}\n                    onClick={() => handleClick(movie)}\n                    src={`http://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                    alt={\n                      movie.title ||\n                      movie.original_title ||\n                      movie.name ||\n                      movie.original_name\n                    }\n                  />\n                  {/* {console.log(movie)} */}\n\n                  {/* <div className=\"movie-over\">\n                    <div className=\"over-text\">\n                      <h2>Overview</h2>\n                      <span>{movie.overview}</span>\n                    </div>\n                  </div> */}\n                </div>\n\n                <div className=\"movie-description\">\n                  <div>\n                    {' '}\n                    {movie.title ||\n                      movie.original_title ||\n                      movie.name ||\n                      movie.original_name}\n                  </div>\n                  <div>\n                    <span\n                      className={` ${\n                        movie.vote_average > 7 ? 'voting-green' : 'voting-red'\n                      } voting`}\n                    >\n                      {movie.vote_average}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )\n        )}\n      </div>\n\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}></YouTube>}\n    </div>\n  );\n}\n\nexport default Rows;\n"]},"metadata":{},"sourceType":"module"}